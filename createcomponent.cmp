<aura:component implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,forceCommunity:availableForAllPageTypes,force:hasRecordId,force:hasSObjectName,force:lightningQuickActionWithoutHeader,lightning:actionOverride" access="global"
                controller="EI_EWI_SubmitComplaint">
    
   
    <aura:attribute name="showPopUp" type="boolean" default="false" /> 
    <aura:attribute name="userList" type="list" default=""/>
      <aura:attribute name="accList" type="list" default=""/>
    <aura:attribute name="accParticipantWrapper" type="Object"/>  
    <aura:attribute name="recordId" type="Id"/>
    <aura:attribute name ="dateComplaint" type="Date"/>
    <aura:attribute name="NameId" type="String" />
    <aura:attribute name="getUser" type="String"/>
    <aura:attribute name="user" 
                    type="Complaint__c" 
                    default="{'sobjectType': 'Complaint__c'}"/> 
    <aura:handler name="init" value="{!this}" action="{!c.doInit}"/>
    
    
    
   <lightning:input label="Case Number" value="{!v.accParticipantWrapper.accRecord.Case__r.CaseNumber}" aura:id="accSelect" disabled="true"/>
    
        
<div class="slds-form-element slds has error">
    <lightning:input type="date" name="input1" label="Date complaint received" value="{!v.dateComplaint}" aura:id="search-name" />    
 </div> 
    <lightning:select name="to" label="Complaint raised by" aura:id="conSelect" onchange="{!c.handlePartipantChange}">
         <option value="">--None--</option>        
            <aura:iteration items="{!v.accList}" var="to">        
           
                <option value="{!to.Id}">{!to.Participant_name__c}</option>
            
            </aura:iteration>
        
    </lightning:select> 
       <!--<lightning:input label="Case Number" value="{!v.accList.Participant_name__c}" aura:id="accSelect"/>-->

    
    <lightning:select name="to" label="Assign case to"  aura:id="userSelect"  onchange="{!c.handleConChange}" >
         <option value="">-- None --</option> 
        <aura:iteration items="{!v.userList}" var="to">       
            
            <option value="{!to.AssigneeId}">{!to.Assignee.Name} </option>
            
        </aura:iteration>
        
    </lightning:select> <br/>
    
       
   <!-- <div >
        Assign case to : <force:inputField  required="true"  aura:id="userSelect" value="{!v.user.Assign_case_to__c}"/>
    </div>-->    
    
    
    <div class="slds-align_absolute-center" style="height:2rem">
          <lightning:button variant="brand" 
                            label="Save" 
                            title="Brand action"  
                            onclick="{!c.handlerSubmit}" 
                             />    
        
        <button type="button" class="slds-button slds-button_neutral" onclick="{!c.cancelBtn}" >Cancel</button>
    </div>  
</aura:component>

=================================================================



({
    doInit : function(component, event, helper) {
        // alert('Hi');       
        var action = component.get("c.getCaseRecord");       
        action.setParams({CaseId: component.get("v.recordId")});
        action.setCallback(this,function(response){
        var State = response.getState();
        if(State==='SUCCESS'){
            var result=response.getReturnValue();  
             console.log('Success result='+(result));
            console.log('Success new='+JSON.stringify(result));
            component.set("v.accParticipantWrapper",result);
            console.log("Line no 13"+result.ParticipantList);
             component.set("v.accList",result.ParticipantList);
            
            component.set("v.userList", result.uList);
            //component.set("v.getUser", result.uList[0].Id);
                      
        }
        else{
            console.log('Failed');
        }
        });      
       
        $A.enqueueAction(action);     
         
    },
    
  

   handlerSubmit:function(component, event, helper) {
       // alert('submit');
       
      	var CaseId = component.get("v.recordId") 
        var dateCmp = component.get("v.dateComplaint");   
        var conName = component.find("conSelect").get("v.value");      
        var userName = component.find("userSelect").get("v.value");
            if((dateCmp == "" || dateCmp == null  || dateCmp == undefined)||
          (conName == "" || conName == null  || conName == undefined)||
          (userName == "" || userName == null  || userName == undefined)){
           var toastEvent = $A.get("e.force:showToast");
           toastEvent.setParams({
               title : 'Error',
               message:'You must complete all fields in order to save the record.',
               duration:'5000',
               key: 'info_alt',
               type: 'error',
               mode: 'pester'
           });
           toastEvent.fire();
       }
       else{
           var action = component.get("c.submitComplaint");
           action.setParams({"accName":CaseId,"dateCmp":dateCmp,"conName":conName,"userName":userName});            
           action.setCallback(this,function(response){ 
               var State = response.getState();
               if(State==='SUCCESS'){
                   var result=response.getReturnValue();  
                   console.log('Success new='+JSON.stringify(result));
                   if(result == 'Case not closed'){
                       // component.set("v.showPopUp", true); 
                       
                       var toastEvent = $A.get("e.force:showToast");
                       toastEvent.setParams({
                           title : 'Error',
                           message:'You are unable to move this case to a complaint status whilst itâ€™s in an open state.',
                           duration:'5000',
                           key: 'info_alt',
                           type: 'error',
                           mode: 'pester'
                       });
                       toastEvent.fire();
                       $A.get('e.force:refreshView').fire();
                       
                       
                   }else{
                       //component.set("v.showPopUp", false);
                       var toastEvent = $A.get("e.force:showToast");
                       toastEvent.setParams({
                           title : 'Success!',
                           message:'The record has been created successfully.',
                           duration:'5000',
                           key: 'info_alt',
                           type: 'success',
                           mode: 'pester'
                       });
                       toastEvent.fire(); 
                       $A.get('e.force:refreshView').fire();
                   }
                   
               }
               else{
                   console.log('Failed');
               }
           });      
           
           $A.enqueueAction(action);     
           
           
       }
       
       
       
   },
    
     handleConChange : function(component, event, helper){         
        
        var userName = component.find("userSelect").get("v.value");        
         component.set("v.getUser", userName);
        
    },
    
    cancelBtn: function(component, event, helper){   
        $A.get("e.force:closeQuickAction").fire();
    }
    
    
})
